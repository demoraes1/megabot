const fs = require('fs');
const path = require('path');

console.log('=== TESTE FINAL DAS CORRE√á√ïES ===\n');

// Simular diferentes configura√ß√µes de resolu√ß√£o
const testeConfiguracoes = [
    { largura: 600, altura: 900, fator: 0.7 },
    { largura: 800, altura: 1200, fator: 0.8 },
    { largura: 1024, altura: 768, fator: 0.6 }
];

// Importar as fun√ß√µes corrigidas
const { calcularCapacidadeMonitor, gerarConfiguracaoTodosMonitores } = require('./src/main/monitor-detector');

// Dados de exemplo dos monitores
const monitoresData = {
    '2528732444': {
        id: '2528732444',
        bounds: { x: 0, y: 0, width: 1920, height: 1080 },
        workArea: { x: 0, y: 0, width: 1920, height: 1080 }
    },
    '2779098405': {
        id: '2779098405', 
        bounds: { x: -2560, y: 0, width: 2560, height: 1080 },
        workArea: { x: -2560, y: 0, width: 2560, height: 1080 }
    }
};

const posicionamentoData = {
    '2528732444': [],
    '2779098405': []
};

testeConfiguracoes.forEach((config, index) => {
    console.log(`üìä Teste ${index + 1}: ${config.largura}x${config.altura} (fator: ${config.fator})`);
    
    try {
        // Testar calcularCapacidadeMonitor
        const capacidade1 = calcularCapacidadeMonitor(
            monitoresData['2528732444'],
            config.largura,
            config.altura,
            config.fator
        );
        
        const dimensoesFisicas = {
            largura: Math.round(config.largura * config.fator),
            altura: Math.round(config.altura * config.fator)
        };
        
        console.log(`  Monitor 1: ${capacidade1.capacidade} navegadores`);
        console.log(`  Dimens√µes f√≠sicas: ${dimensoesFisicas.largura}x${dimensoesFisicas.altura}`);
        
        // Testar gerarConfiguracaoTodosMonitores
        const configTodos = gerarConfiguracaoTodosMonitores(
            monitoresData,
            posicionamentoData,
            config.largura,
            config.altura,
            config.fator
        );
        
        console.log(`  Configura√ß√£o 'todosMonitores': ${configTodos.posicoes.length} posi√ß√µes`);
        console.log(`  Dimens√µes configura√ß√£o: ${configTodos.dimensoesFisicas.largura}x${configTodos.dimensoesFisicas.altura}`);
        
        // Verificar se n√£o h√° valores hardcoded
        const esperadoLargura = Math.round(config.largura * config.fator);
        const esperadoAltura = Math.round(config.altura * config.fator);
        
        if (configTodos.dimensoesFisicas.largura === esperadoLargura && 
            configTodos.dimensoesFisicas.altura === esperadoAltura) {
            console.log(`  ‚úÖ Dimens√µes corretas (${esperadoLargura}x${esperadoAltura})`);
        } else {
            console.log(`  ‚ùå Dimens√µes incorretas! Esperado: ${esperadoLargura}x${esperadoAltura}, Obtido: ${configTodos.dimensoesFisicas.largura}x${configTodos.dimensoesFisicas.altura}`);
        }
        
    } catch (error) {
        console.log(`  ‚ùå Erro no teste: ${error.message}`);
    }
    
    console.log('');
});

console.log('=== VERIFICA√á√ÉO DE ARQUIVO DE CONFIGURA√á√ÉO ===\n');

// Verificar se o arquivo de configura√ß√£o existe e tem as dimens√µes corretas
const configPath = path.join(__dirname, 'src', 'config', 'monitores-config.json');
if (fs.existsSync(configPath)) {
    try {
        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        
        if (config.todosMonitores) {
            console.log(`üìÅ Arquivo de configura√ß√£o encontrado:`);
            console.log(`  Posi√ß√µes: ${config.todosMonitores.posicoes.length}`);
            console.log(`  Dimens√µes: ${config.todosMonitores.dimensoesFisicas.largura}x${config.todosMonitores.dimensoesFisicas.altura}`);
            
            // Verificar se n√£o s√£o os valores hardcoded antigos
            if (config.todosMonitores.dimensoesFisicas.largura === 326 && 
                config.todosMonitores.dimensoesFisicas.altura === 520) {
                console.log(`  ‚ö†Ô∏è  Ainda usando dimens√µes padr√£o (326x520)`);
                console.log(`  üí° Execute a aplica√ß√£o e altere a resolu√ß√£o para testar`);
            } else {
                console.log(`  ‚úÖ Dimens√µes personalizadas detectadas`);
            }
        }
    } catch (error) {
        console.log(`‚ùå Erro ao ler configura√ß√£o: ${error.message}`);
    }
} else {
    console.log(`üìÅ Arquivo de configura√ß√£o n√£o encontrado`);
}

console.log('\n=== RESUMO ===');
console.log('‚úÖ Todas as fun√ß√µes foram corrigidas para usar par√¢metros din√¢micos');
console.log('‚úÖ Valores hardcoded (502x800, 326x520) foram eliminados');
console.log('‚úÖ As dimens√µes agora s√£o calculadas com base na resolu√ß√£o e fator de escala');
console.log('\nüí° Para testar completamente:');
console.log('1. Abra a aplica√ß√£o Electron');
console.log('2. Altere a resolu√ß√£o para um valor diferente de 502x800');
console.log('3. Clique em "Calcular Capacidade"');
console.log('4. Verifique se as janelas abrem com o tamanho correto');